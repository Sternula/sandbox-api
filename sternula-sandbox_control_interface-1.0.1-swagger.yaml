openapi: 3.0.3
info:
  title: Sternula Sandbox Control Interface 
  version: 1.0.1
  description: >-
    Interface to be used by Sternula VDES/MMS Sandbox users to set and query settings of their respective sandbox, authenticated by http basic authentication. 
    Copyright Sternula Aps, Denmark, 2019, 2020
    May be used to work with the <a href="https://www.sternula.com/index.php/product-vdes-testplatform/">Sternula Sandbox Product</a>.
  termsOfService: 'https://www.sternula.com/index.php/general-terms-and-conditions/'
  contact:
    name: Sternula
    url: 'https://www.sternula.com'
#===paths===
paths:
  /vdes_:
    post:
      tags:
        - config
      summary: VDE-SAT configuration
      description: Change the start_time or the number_of_satellites to be used in the VDE-SAT network model. Only one of the parameters must be set.
      requestBody:
        content:
          application/json:
            schema:
                oneOf:
                - $ref: '#/components/schemas/Constellation_time'
                - $ref: '#/components/schemas/Constellation_number_of_satellites'
      responses:
        '201':
          description: Created
        '422':
          description: Unprocessable Entity
  /constellations:
    post:
      tags:
        - constellation
      summary: Add the VDE-SAT constellation
      requestBody:
        required: true      
        description: A JSON object containing a VDE-SAT constellation on which simulations can be performed eg.
          the roadmap. Please note that only ONE constellation is allowed at the moment!
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Constellation'
      responses:
        '200':
          description: added VDE-SAT constellation
        '422':
          description: Unprocessable Entity
  /start:
    post:
      tags: 
        - config
      summary: Start VDE-SAT network
      description: Start the VDE-SAT network acording to last uploaded configuration.
      responses:
        '200':
          description: Started
        '400':
          description: Unable to start
  /shutdown:
    post:
      tags: 
        - config
      summary: Shutdown the VDE-SAT network
      description: Shutdown the VDE-SAT network.
      responses:
        '200':
          description: Shutdown
        '400':
          description: Unable to shutdown
  #---Ships---
  /ships:
    get:
      tags:
        - ship
      summary: get a list of ships
      description: 'Get the list of ships in the simulation.'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfShips'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - ship
      summary: Add a new ship
      description: 'Add a new ship to the VDE-SAT network model'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ship'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Mmsi'
          links:
            GetShipByMMSI:
              operationId: getShip
              parameters:
                MMSI: '$response.body#/MMSI'
              description: Link to the created ship.
        '422':
          description: Unprocessable Entity
  /ships/{MMSI}:
    parameters:
      - in: path
        name: MMSI
        required: true
        description: MMSI of the ship
        schema:
           $ref: '#/components/schemas/Mmsi'
    # delete
    delete:
      tags:
        - ship
      summary: Delete a ship from the simulation. It will not be possible to receive messages for that ship anymore. The VDE-SAT network will forget that this ship existed. Messages cannot be transferred to this ship anymore.
      responses:
        '204':
          description: Ship was deleted.    
        '404':
          description: not found
    # get
    get:
      tags:
        - ship
      summary: Get a ship by MMSI
      operationId: getShip
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ship'
        '404':
          description: not found 
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
  #---coaststations---
  /coaststations:
    get:
      tags:
        - coaststation
      summary: get a list of coast stations
      description: Get the list of coast stations in the simulation.
      operationId: getAllCoastStation
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfCoastStations'
    # post
    post:
      tags:
        - coaststation
      summary: Add a new coast station
      description: 'Add a new coast station to the VDE-SAT network model'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoastStation'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Mmsi'
          links:
            GetCoastStationByMMSI:
              operationId: getCoastStation
              parameters:
                MMSI: '$response.body#/MMSI'
              description: Link to the created coast station.
        '422':
          description: Unprocessable Entity
  /coaststations/{MMSI}:
    parameters:
      - in: path
        name: MMSI
        schema:
           $ref: '#/components/schemas/Mmsi'
        required: true
        description: MMSI of the coast station
    # delete
    delete:
      tags:
        - coaststation
      summary: Delete a coast station from the simulation. The VDE-SAT network will forget that this coast station existed. Messages cannot be transferred through this coast station anymore.
      responses:
        '204':
          description: Coast station was deleted.    
        '404':
          description: Not Found - no coastal station with this MMSI was found.
    # get
    get:
      tags:
        - coaststation
      summary: Get a coast station by MMSI
      operationId: getCoastStation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoastStation'
        '404':
          description: Not Found - no coast station with this MMSI was found
#===== Components =====
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Error:
      description: To be returned on error. Includes error code and optionally a description of the error.
      type: object
      properties:
        errorCause:
          type: string
          enum: [unspecified, 
                 position_of_destination_unknown,
                 message_too_long,
                 authentication_failure,
                 unknown_destination,
                 too_late_to_cancel]
        errorMessage:
          type: string
      required:
        - errorCause
        
    #--Constellation--#
    Constellation:
      description: The satellite constellation used by the SimLab simulator
      type: object
      properties:
        constellationId:
          description: A universally unique identifier of the constellation [uuid]
          type: string
          format: uuid
          readOnly: true
        startTime:
          description: start time for the constellation. - the first satellite in operation.
          type: string
          format: date-time
        satellites:
          description: The list of satellites in the constellation
          type: array
          minimum: 1
          items:
            $ref: '#/components/schemas/satellite'
        groundStations:
          description: The list of coast stations in the constellation
          type: array
          items:
            $ref: '#/components/schemas/GroundStation'
        Network:
          $ref: '#/components/schemas/Network'
    satellite:
      description: satellite
      type: object
      properties:
        id:
          description: The unique id of the satellite, default Sat'N', where n is a consecutive number.
          type: string
          uniqueItems: true
          example: 'Sat14'
        operationDate:
          description: The date from which the satellite is operational.
          type: string
          format: date-time
          example: '2026-12-24T12:11:04.564Z'
          
        orbit:
          $ref: '#/components/schemas/orbit'
        radios:
          type: array
          items:
            $ref: '#/components/schemas/radio'
    orbit:
      description: Orbit defined by the six Keplerian elements plus epoch.
      type: object
      required:
        - e
        - i
        - ra
        - ap
        - ma
        - mm
        - epoch
      properties:
        e:
          description: 'Orbital eccentricity [e] (0 = circle)'
          type: number
          format: double
          minimum: 0
          maximum: 1
        i:
          description: 'Orbital Inclination [i]'
          type: number
          format: double
          minimum: 0
          maximum: 180
        ra:
          description: Longitude of the ascending node (Right Ascension of Ascending Node)
            [Î©]
          type: number
          format: double
          minimum: 0
          maximum: 360
        ap:
          description: 'Argument of Perigee [Ï]'
          type: number
          format: double
          minimum: 0
          maximum: 360
        ma:
          description: 'Mean anomaly [M]'
          type: number
          format: double
          minimum: 0
          maximum: 360
        mm:
          description: 'Mean motion [rev/day].'
          type: number
          format: double
          minimum: 10
          maximum: 17
        epoch:
          description: Epoch
          type: string
          format: date-time
      example: 
        e: 0.0
        i: 88.0
        ra: 160.0
        ap: 0.0
        ma: 270
        mm: 14.9
        epoch: '2020-01-01T17:16:13:001'
    radio:
      description: Radio module and antenna. Received power calculation Preceived [dBm] =
        Ptransmitted [dBm] + Lossdistance [dB] + Lossmisc [dB]
      type: object
      properties:
        id:
          description: Unique id
          type: string
          example: radio 1
        txPowerDBW:
          description: 'Transmit power [dBW]'
          type: number
          format: double
          example: -10
        txFrequency:
          description: 'Transmit radio frequency [MHz]'
          type: number
          format: double
          minimum: 0
          example: 100
        rxIfDBm:
          description: 'The receiver noise+interference (N0+I0) [dB]'
          type: number
          format: double
          example: -115
        rxMiscLossDB:
          description: Various loss (polarization, etc.) used in the received power
            calculation.
          type: number
          format: double
          example: 0
        antenna:
          oneOf:
            - $ref: '#/components/schemas/DirectionalAntenna'
            - $ref: '#/components/schemas/OmniAntenna'
            - $ref: '#/components/schemas/IsotropicAntenna'

    BasicAntenna:
      description: Basic parameter for an antenna.
      type: object
      properties:
        leftTilt:
          description: The tilt of the antenna in left direction from straight down (nadir).
          type: number
          format: degrees
          minimum: -180
          maximum: 180
          default: 0
          example: 0
        upTilt: 
          description: The tilt of the antenna in forward direction from straight down (nadir). The leftTilt is first applied and then the upTilt (like longitude used before latitude).  
          type: number
          format: degrees
          minimum: -180
          maximum: 180
          default: 0
          example: 67
          
    DirectionalAntenna:
      description: The directional antenna is modelled by an ellipsoid 3D shape where the distance, d, from an internal point of the ellipsoid to the surface, raised to the power of 3, d3, represents the relative gain in that direction.
      allOf: 
        - $ref: '#/components/schemas/BasicAntenna'
        - type: object
          properties:
            type:
              description: Antenna type eg. xyagi
              type: string
              enum: [directional, xyagi]
              example: directional
            spotCenterGainDB:
              description: 'The directional spot gain in [dBi]. 0.0 is a isotropic antenna.'
              type: number
              format: double
              default: 0.0
              example: 8
            spotWidthToHeightFactor:
              description: This allows the spot to be stretched. E.g. a value of 2 means that the width of the spot is twice the height. So, the gain in a direction 10 degrees left of the main direction will be the exact same as the gain in a direction pointing 5 degrees up. Specifying this will automatically produce the ellipsoid shape together with the spotCenterGainDB parameter.
              type: number
              format: double
              default: 1

    OmniAntenna:
      description: The dipole antenna (omni) is most often used for the devices on ground. It is modelled by an ellipsoid 3D shape where the distance, d, from the center of the ellipsoid to the surface, raised to the power of 3.
      allOf: 
        - $ref: '#/components/schemas/BasicAntenna'
        - type: object
          properties:
            type:
              description: Antenna type
              type: string
              enum: [dipole]
              example: dipole
            horizontalGainDB:
              description: 'The gain in dBi in horizontal direction. Specifying this will automatically determine the ellipsoid shape such that it has the specified gain in the horizontal direction while maintaining a total gain in all directions similar to an isotropic antenna.'
              type: number
              format: double
              default: 0.0
              
    IsotropicAntenna:
      description: The isotropic antenna is a teoretical antenna. It is modelled by 0 dBi in any directions.
      allOf: 
        - $ref: '#/components/schemas/BasicAntenna'
        - type: object
          properties:
            type:
              description: Antenna type
              type: string
              enum: [isotropic]
              example: isotropic
            gainDB:
              description: 'The gain in 0 dBi'
              type: number
              format: double
              default: 0.0        
    Mmsi:
      description: Maritime Mobile Service Identity
      type: string
      minLength: 9
      maxLength: 9
      format: mmsi
      pattern: '^\d{9}$'
      example: '220243167'
    #---conf---
    Constellation_time:
      type: object
      properties:
        start_time: 
          description: Constellation calculated from Sternula's roadmap and the given time. Used in the following VDE-SAT network simulations until changed.
          type: string
          format: date-time
        interference_conditions:
          $ref: '#/components/schemas/Interference_conditions'
        time_factor:
          $ref: '#/components/schemas/Time_factor'
    Constellation_number_of_satellites:
      type: object
      properties:
        number_of_satellites:      
          description: Number of satellites used in the following VDE-SAT network simulations until changed. Shall not be specified if year is specified.
          type: integer
          minimum: 1
          maximum: 140
          example: 4
        interference_conditions:
          $ref: '#/components/schemas/Interference_conditions'
        time_factor:
          $ref: '#/components/schemas/Time_factor'
    Interference_conditions:
      description: gives the possibility to assume good or bad conditions for the transmissions.
      type: string
      enum: [bad, normal, good]
      default: normal
    Time_factor:
      description: the factor applied to the time clock in the simulation. If e.g. set to 10, a 60 minute interval in the simulated network will only take 6 minutes in realtime. Default is a factor of 1.
      type: integer
      minimum: 1
      maximum: 10000
      example: 10
    #---ship---  
    ListOfShips:
      type: array
      items:
        type: object
        properties:
          MMSI: 
            $ref: '#/components/schemas/Mmsi'
    Ship:
      type: object
      required:
        - MMSI
        - latitude
        - longitude
      properties:
        MMSI:
          $ref: '#/components/schemas/Mmsi'
        latitude:
          $ref: '#/components/schemas/Latitude'
        longitude:
          $ref: '#/components/schemas/Longitude'
    #---coast stations--- 
    ListOfCoastStations:
      type: array
      items:
        type: object
        properties:
          MMSI: 
            $ref: '#/components/schemas/Mmsi'
    CoastStation:
      type: object
      required:
        - MMSI
        - coverage
      properties:
        MMSI:
          $ref: '#/components/schemas/Mmsi'
        coverage:
          type: array
          uniqueItems: true
          items:
            type: object
            required:
              - lon
              - lat            
            properties:
              lon: 
                $ref: '#/components/schemas/Longitude'
              lat: 
                $ref: '#/components/schemas/Latitude'
          minItems: 3
          maxItems: 16
          example: 
            - lon: 10.222
              lat: 56.822
            - lon: 10.222
              lat: 57.142
            - lon: 10.4042
              lat: 57.142
            - lon: 10.4042
              lat: 56.822
    GroundStation:
      description: Gateway between VDE-SAT network and a terrestrial network
      type: object
      required:
        - id
        - pointGeo
      properties:
        id:
          type: string
        pointGeo:
          $ref: '#/components/schemas/PointGeo'
        timestamp:
          type: string
          format: date-time
          readOnly: true
        receivedData:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
      example:
        id: 'ST-AAL'
        pointGeo:
          latitude: 57.0123
          longitude: 9.9888

    Network:
      description: Characteristics of the VDE-SAT network. This is also where you can change the Interference.
      type: object
      properties:
        name:
          type: string
          enum:
            - VDES
        sessionUL:
          $ref: '#/components/schemas/SessionAlloc'
        sessionDL:
          $ref: '#/components/schemas/SessionAlloc'

    SessionAlloc:
      type: object
      properties:
        resourceAlloc:
          description: An array of specifications of the data rates given to UEs given different radio conditions.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ResourceAlloc'
        
    ResourceAlloc:
      type: object
      required:
        - rxThresholdDBm
        - allocationKbps
        - codingFactor
      properties:
        rxThresholdDBm:
          description: If the received signal is better than this threshold, and if no other specification with a higher threshold exists, where the received signal is better than the threshold, then the UE is allocated resources according to the next two parameters. [dBm]
          type: number
          format: double
          example: -135
        allocationKbps:
          description:  The occupied resources before coding and repetition. [Kbps]
          type: number
          format: double
          minimum: 0
          example: 50
        codingFactor:
          description: The level of redundancy (coding and repitions) as a factor. E.g. if there is no coding and the transmission is repeated once, the codingFactor is 2.
          type: number
          format: double
          minimum: 0
          example: 55
    PointGeo:
      description: Point in Geo. Altitude is optional.
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          $ref: '#/components/schemas/Latitude'
        longitude:
          $ref: '#/components/schemas/Longitude'
        altitude:
          $ref: '#/components/schemas/Altitude'
          
    Latitude:
      description: latitude in Decimal Degrees
      type: number
      format: degrees
      minimum: -90
      maximum: 90
      example: 56.9729
      
    Longitude:
      description: longitude in Decimal Degrees
      type: number
      format: degrees
      minimum: -180
      maximum: 180
      example: 10.3336
      
    Altitude:
      description: Altitude - height above sea level [meter]
      type: number
      format: double
      default: 0.0  #sea level
      example: 20.50

  #---responses---
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
#--------
security:
  - BasicAuth: []
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/overgaard/sternula-sandbox_control_interface/1.0.1