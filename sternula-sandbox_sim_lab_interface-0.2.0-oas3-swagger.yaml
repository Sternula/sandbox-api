openapi: 3.0.3
info:
  title: Sternula Sandbox SimLab Interface
  version: 0.2.0-oas3
  description: >-
    Internal interface between Sternula VDES/MMS Sandbox and SimLab simulation tool. Copyright Sternula Aps, Denmark, 2019, 2020, 2021 May be used to work with the <a href="https://www.sternula.com/index.php/product-vdes-testplatform/">Sternula Sandbox Product</a>.
  termsOfService: 'https://www.sternula.com/index.php/general-terms-and-conditions/'
  contact:
    name: Sternula
    url: 'https://www.sternula.com'
#----------------------
# Paths
#----------------------
paths:
  /constellations:
    post:
      tags:
        - constellation
      summary: Create a VDE-SAT constellation and return det simulation Id
      operationId: createConstellation
      requestBody:
        required: true      
        description: A JSON object containing a VDE-SAT constellation on which simulations can be performed eg.
          the roadmap.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Constellation'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: ID of the created constellation
          links:
            GetConstellationByConstellationUUID:
              operationId: getConstellation
              parameters:
                constellationId: '$response.body#/constellationId'
              description: The `uuid` value returned in the response can be used as
                the `constellationId` parameter in `GET /constellations/{constellationId}`.
        '422':
          description: Unprocessable Entity

  /constellations/{constellationId}:
    get:
      tags: 
        - constellation
      summary: Returns a constellation by an id.
      parameters:
        - name: constellationId
          in: path
          required: true
          description: The uuid of the constellation.
          schema:
            type: string
            format: uuid
            minimum: 1
            maximum: 1
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      responses:
        '200':
          description: A constellation object.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Constellation'
        '400':
          description: The specified constellationId is invalid (not a uuid).
        '404':
          description: A constellation with the specified Id was not found.
        default:
          description: Unexpected error

  /constellations/{constellationId}/simulations:
    post:
      tags:
        - simulation
      summary: Create and run a simulation
      operationId: createSimulation
      parameters:
        - name: constellationId
          in: path
          description: constellation Id of the constellation on which the simulation is to be performed. 
          required: true
          schema:
            type: string
            format: uuid
            minimum: 1
            maximum: 1
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      requestBody:
        required: true      
        description: A JSON object containing starttime and data packages for the concrete simulation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Simulation'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  simulationId:
                    type: string
                    format: uuid
                    description: Id of the created simulation
                    example: '3da864c6-f2e8-455e-b0e8-99495a8ffb8a'
          links:
            GetSimulationBySimulationUUID:
              operationId: getSimulation
              parameters:
                constellationId: '$response.body#/simulationId'
              description: The `uuid` value returned in the response can be used as
                the `simulationId` parameter in `GET /constellations/{constellationId}/simulation/{simulationId}`.
        '422':
          description: Unprocessable Entity
  /constellations/{constellationId}/simulation/{simulationId}/devices:
    get:
      tags: 
        - simulation
      summary: Returns a simulation of devices by the constellationId and simulationId.
      parameters:
        - name: constellationId
          in: path
          required: true
          description: The uuid of the constellation to be used.
          schema:
            type: string
            format: uuid
            minimum: 1
            maximum: 1
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        - name: simulationId
          in: path
          required: true
          description: The uuid of the simulation to return.
          schema:
            type: string
            format: uuid
            minimum: 1
            maximum: 1
            example: '3da864c6-f2e8-455e-b0e8-99495a8ffb8a'
      responses:
        '200':
          description: A simulation object - containing all simulations objects of devices.
          content:
            application/json:
              schema:
                description: The list of ships in the constellation
                type: array
                items:
                  $ref: '#/components/schemas/Device'
                example:
                  - timestamp: '2022-07-20T17:32:10.280'
                    MMSI: '220191920'
                    pointGeo:
                      latitude: 60.011
                      longitude: 11.111
                    rxData: 0
                  - timestamp: '2022-07-20T17:32:10.280'
                    MMSI: '220145544'
                    pointGeo:
                      latitude: -16.77
                      longitude: 145.989
                    rxData: 96000
                  - timestamp: '2022-07-20T17:32:30.280'
                    MMSI: '220191920'
                    pointGeo:
                      latitude: 60.011
                      longitude: 11.111
                    rxData: 0
                  - timestamp: '2022-07-20T17:32:30.280'
                    MMSI: '220145544'
                    pointGeo:
                      latitude: -16.77
                      longitude: 145.989
                    rxData: 5600
        '202':
          description: Accepted. But the simulation has not been completed yet.
        '400':
          description: The specified constellationId or SimulationId is invalid (not a uuid).
        '404':
          description: A simulation with the specified Id was not found.
        default:
          description: Unexpected error

  /constellations/{constellationId}/simulation/{simulationId}/groundstations:
    get:
      tags: 
        - simulation
      summary: Returns a simulation of groundstations, specified by the constellationId and simulationId.
      parameters:
        - name: constellationId
          in: path
          required: true
          description: The uuid of the constellation to be used.
          schema:
            type: string
            format: uuid
            minimum: 1
            maximum: 1
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        - name: simulationId
          in: path
          required: true
          description: The uuid of the simulation to return.
          schema:
            type: string
            format: uuid
            minimum: 1
            maximum: 1
            example: '3da864c6-f2e8-455e-b0e8-99495a8ffb8a'
      responses:
        '200':
          description: A simulation object - containing all simulations objects of ground stations.
          content:
            application/json:
              schema:
                description: The list of ground stations in the constellation
                type: array
                items:
                  $ref: '#/components/schemas/GroundStation'
                example:
                  id: 'ST-AAL'
                  pointGeo:
                    latitiude: 57.013
                    longitude: 9.9888
                  timestamp: '2022-07-20T17:32:320'
                  receivedData: 96000
        '202':
          description: Accepted. But the simulation has not been completed yet.
        '400':
          description: The specified constellationId or SimulationId is invalid (not a uuid).
        '404':
          description: A simulation with the specified Id was not found.
        default:
          description: Unexpected error

  /constellations/{constellationId}/simulation/{simulationId}/coaststations:
    get:
      tags: 
        - simulation
      summary: Returns a simulation of coaststations, specified by the constellationId and simulationId.
      parameters:
        - name: constellationId
          in: path
          required: true
          description: The uuid of the constellation to be used.
          schema:
            type: string
            format: uuid
            minimum: 1
            maximum: 1
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
            
        - name: simulationId
          in: path
          required: true
          description: The uuid of the simulation to return.
          schema:
            type: string
            format: uuid
            minimum: 1
            maximum: 1
            example: '3da864c6-f2e8-455e-b0e8-99495a8ffb8a'
      responses:
        '200':
          description: A simulation object - containing all simulations objects of coast stations.
          content:
            application/json:
              schema:
                description: The list of coast stations in the constellation
                type: array
                items:
                  $ref: '#/components/schemas/CoastStation'
                example:
                  id: '002204477'
                  pointGeo:
                    latitude: 56.97534
                    longitude: 10.33412
                  timestamp: '2022-07-20T17:32:280'
                  receivedData: 96000
        '202':
          description: Accepted. But the simulation has not been completed yet.
        '400':
          description: The specified constellationId or SimulationId is invalid (not a uuid).
        '404':
          description: A simulation with the specified Id was not found.
        default:
          description: Unexpected error
          
#----------------------
# Components
#----------------------
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    #--Constellation--#
    Constellation:
      description: The satellite constellation used by the SimLab simulator
      type: object
      properties:
        constellationId:
          description: A universally unique identifier of the constellation [uuid]
          type: string
          format: uuid
          readOnly: true
        startTime:
          description: start time for the constellation. - the first satellite in operation.
          type: string
          format: date-time
        satellites:
          description: The list of satellites in the constellation
          type: array
          minimum: 1
          items:
            $ref: '#/components/schemas/satellite'
        groundStations:
          description: The list of coast stations in the constellation
          type: array
          items:
            $ref: '#/components/schemas/GroundStation'
        devices:
          description: The list of ships in the constellation
          type: array
          maximum: 1
          items:
            $ref: '#/components/schemas/Device'
        coastStations:
          description: The list of coast stations in the constellation
          type: array
          maximum: 1
          items:
            $ref: '#/components/schemas/CoastStation'
        Network:
          $ref: '#/components/schemas/Network'
     
    satellite:
      description: satellite
      type: object
      properties:
        id:
          description: The unique id of the satellite, default Sat'N', where n is a consecutive number.
          type: string
          uniqueItems: true
          example: 'Sat14'
        operationDate:
          description: The date from which the satellite is operational.
          type: string
          format: date-time
          example: '2026-12-24T12:11:04.564Z'
          
        orbit:
          $ref: '#/components/schemas/orbit'
        radios:
          type: array
          items:
            $ref: '#/components/schemas/radio'
    orbit:
      description: Orbit defined by the six Keplerian elements plus epoch.
      type: object
      required:
        - e
        - i
        - ra
        - ap
        - ma
        - mm
        - epoch
      properties:
        e:
          description: 'Orbital eccentricity [e] (0 = circle)'
          type: number
          format: double
          minimum: 0
          maximum: 1
        i:
          description: 'Orbital Inclination [i]'
          type: number
          format: double
          minimum: 0
          maximum: 180
        ra:
          description: Longitude of the ascending node (Right Ascension of Ascending Node)
            [Ω]
          type: number
          format: double
          minimum: 0
          maximum: 360
        ap:
          description: 'Argument of Perigee [ω]'
          type: number
          format: double
          minimum: 0
          maximum: 360
        ma:
          description: 'Mean anomaly [M]'
          type: number
          format: double
          minimum: 0
          maximum: 360
        mm:
          description: 'Mean motion [rev/day].'
          type: number
          format: double
          minimum: 10
          maximum: 17
        epoch:
          description: Epoch
          type: string
          format: date-time
      example: 
        e: 0.0
        i: 88.0
        ra: 160.0
        ap: 0.0
        ma: 270
        mm: 14.9
        epoch: '2020-01-01T17:16:13:001'
    radio:
      description: Radio module and antenna. Received power calculation Preceived [dBm] =
        Ptransmitted [dBm] + Lossdistance [dB] + Lossmisc [dB]
      type: object
      properties:
        id:
          description: Unique id
          type: string
          example: radio 1
        txPowerDBW:
          description: 'Transmit power [dBW]'
          type: number
          format: double
          example: -10
        txFrequency:
          description: 'Transmit radio frequency [MHz]'
          type: number
          format: double
          minimum: 0
          example: 100
        rxIfDBm:
          description: 'The receiver noise+interference (N0+I0) [dB]'
          type: number
          format: double
          example: -115
        rxMiscLossDB:
          description: Various loss (polarization, etc.) used in the received power
            calculation.
          type: number
          format: double
          example: 0
        antenna:
          oneOf:
            - $ref: '#/components/schemas/DirectionalAntenna'
            - $ref: '#/components/schemas/OmniAntenna'

    BasicAntenna:
      description: Basic parameter for an antenna.
      type: object
      properties:
        leftTilt:
          description: The tilt of the antenna in left direction from straight down (nadir).
          type: number
          format: degrees
          minimum: -180
          maximum: 180
          default: 0
        upTilt: 
          description: The tilt of the antenna in forward direction from straight down (nadir). The leftTilt is first applied and then the upTilt (like longitude used before latitude).  
          type: number
          format: degrees
          minimum: -180
          maximum: 180
          default: 0
          
    DirectionalAntenna:
      description: The directional antenna is modelled by an ellipsoid 3D shape where the distance, d, from an internal point of the ellipsoid to the surface, raised to the power of 3, d3, represents the relative gain in that direction.
      allOf: 
        - $ref: '#/components/schemas/BasicAntenna'
        - type: object
          properties:
            type:
              description: Antenna type eg. xyagi
              type: string
              enum: [directional, xyagi]
              example: directional
            spotCenterGainDB:
              description: 'The directional spot gain in [dBi]. 0.0 is a isotropic antenna.'
              type: number
              format: double
              default: 0.0
            spotWidthToHeightFactor:
              description: This allows the spot to be stretched. E.g. a value of 2 means that the width of the spot is twice the height. So, the gain in a direction 10 degrees left of the main direction will be the exact same as the gain in a direction pointing 5 degrees up. Specifying this will automatically produce the ellipsoid shape together with the spotCenterGainDB parameter.
              type: number
              format: double
              default: 1

    OmniAntenna:
      description: The omni antenna is most often used for the devices on ground. It is modelled by an ellipsoid 3D shape where the distance, d, from the center of the ellipsoid to the surface, raised to the power of 3.
      allOf: 
        - $ref: '#/components/schemas/BasicAntenna'
        - type: object
          properties:
            type:
              description: Antenna type
              type: string
              enum: [omni]
              example: omni
            horizontalGainDB:
              description: 'The gain in dBi in horizontal direction. Specifying this will automatically determine the ellipsoid shape such that it has the specified gain in the horizontal direction while maintaining a total gain in all directions similar to an isotropic antenna.'
              type: number
              format: double
              default: 0.0
              
    Simulation:
      description: Simulation to be performed
      type: object
      required:
        - startTime
        - sourceIds
        - destinationIds
        - messageSize
      properties:
        startTime:
          description: start time for the simulation.
          type: string
          format: date-time
        sourceIds:
          type: array
          uniqueItems: true
          items:
            oneOf:
              #coaststation Id / ship Id
            - $ref: '#/components/schemas/Mmsi'
              #groundstation Id
            - type: object  
              properties:
                id:
                  type: string            
        destinationIds:
          type: array
          uniqueItems: true
          items:
            oneOf:
              #coaststation Id / ship Id
            - $ref: '#/components/schemas/Mmsi'
              #groundstation Id
            - type: object  
              properties:
                id:
                  type: string            
        messageSize:
          description: message size [bytes]
          type: integer
          format: int64
          minimum: 1
      example: 
        description: Example of sending 1kB to one ship with MMSI 220243167 through Coast stations 002202467, 002202468 or Ground station 999882.
        startTime: '2022-07-20T17:32:280'
        sourceIds: [002202467, 002202468, '999882', '999880']
        destinationId: [220243167]
        messageSize: 10000
    
    GroundStation:
      description: Gateway between VDE-SAT network and a terrestrial network
      type: object
      required:
        - id
        - pointGeo
      properties:
        id:
          type: string
        pointGeo:
          $ref: '#/components/schemas/PointGeo'
        timestamp:
          type: string
          format: date-time
          readOnly: true
        receivedData:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
      example:
        id: 'ST-AAL'
        pointGeo:
          latitude: 57.0123
          longitude: 9.9888

    Device:
      type: object
      required:
        - MMSI
        - pointGeo
      properties:
        MMSI:
          $ref: '#/components/schemas/Mmsi'
        pointGeo:
          $ref: '#/components/schemas/PointGeo'
        radios:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/radio'
        rxData:
          description: received data since last reading [Bytes]
          type: integer
          format: int64
          readOnly: true
      example:
        MMSI: '220191920'
        pointGeo:
          latitude: 60.011
          longitude: 11.111
        radios:
          id: 'radio 1'
          txPowerDBW: -12
          txFrequency: 157.250
          rxMiscLossDB: -3
          antenna:
            type: 'omni'

    CoastStation:
      type: object
      required:
        - MMSI
        - pointGeo
      properties:
        MMSI:
          $ref: '#/components/schemas/Mmsi'
        pointGeo:
          $ref: '#/components/schemas/PointGeo'
      example:
        MMSI: '002202467'
        latitude: 56.97534
        longitude: 10.33412
        altitude: 0.02
              
    PointGeo:
      description: Point in Geo. Altitude is optional.
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          $ref: '#/components/schemas/Latitude'
        longitude:
          $ref: '#/components/schemas/Longitude'
        altitude:
          $ref: '#/components/schemas/Altitude'
          
    Network:
      description: Characteristics of the VDE-SAT network. This is also where you can change the Interference.
      type: object
      properties:
        name:
          type: string
          enum:
            - VDES
        sessionUL:
          $ref: '#/components/schemas/SessionAlloc'
        sessionDL:
          $ref: '#/components/schemas/SessionAlloc'

    SessionAlloc:
      type: object
      properties:
        capacityKbps:
          description: The total max user data capacity of the eNodeB without coding and repetition
          type: number
          minimum: 0
          example: 150
        resourceAlloc:
          description: An array of specifications of the data rates given to UEs given different radio conditions.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ResourceAlloc'
        
    ResourceAlloc:
      type: object
      required:
        - rxThresholdDBm
        - allocationKbps
        - codingFactor
      properties:
        rxThresholdDBm:
          description: If the received signal is better than this threshold, and if no other specification with a higher threshold exists, where the received signal is better than the threshold, then the UE is allocated resources according to the next two parameters. [dBm]
          type: number
          format: double
          example: -135
        allocationKbps:
          description:  The occupied resources before coding and repetition. [Kbps]
          type: number
          format: double
          minimum: 0
          example: 50
        codingFactor:
          description: The level of redundancy (coding and repitions) as a factor. E.g. if there is no coding and the transmission is repeated once, the codingFactor is 2.
          type: number
          format: double
          minimum: 0
          example: 55
      
    ##
    Mmsi:
      description: Maritime Mobile Service Identity
      type: string
      minLength: 9
      maxLength: 9
      format: mmsi
      pattern: '^\d{9}$'
      example: '220243167'
      
    Latitude:
      description: latitude in Decimal Degrees
      type: number
      format: degrees
      minimum: -90
      maximum: 90
      example: 56.9729
      
    Longitude:
      description: longitude in Decimal Degrees
      type: number
      format: degrees
      minimum: -180
      maximum: 180
      example: 10.3336
      
    Altitude:
      description: Altitude - height above sea level [km]
      type: number
      format: double
      default: 0.0  #sea level
      example: 550.50
 
security:
  - BasicAuth: []
servers:
  - description: SwaggerHub API Auto Mocking
    url: >-
      https://virtserver.swaggerhub.com/overgaard/sternula-sim_lab_interface/0.2.0